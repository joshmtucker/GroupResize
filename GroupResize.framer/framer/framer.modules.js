require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"GroupResize":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
var defaults,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

defaults = {
  props: {
    resizeChildren: true,
    resizing: "none"
  },
  resizingTypes: ["none", "stretchWidth", "stretchHeight", "stretch", "pinX", "pinY", "pin", "resizeWidth", "resizeHeight", "resize", "floatX", "floatY", "float"]
};

exports.GroupResizeLayer = (function(superClass) {
  extend(GroupResizeLayer, superClass);

  function GroupResizeLayer(opts) {
    var key, ref, value;
    if (opts == null) {
      opts = {};
    }
    ref = defaults.props;
    for (key in ref) {
      value = ref[key];
      if (opts[key] == null) {
        opts[key] = value;
      }
    }
    GroupResizeLayer.__super__.constructor.call(this, opts);
  }

  GroupResizeLayer.prototype._onResize = function() {
    var child, i, len, ref, results;
    if (this.children.length === 0) {
      return;
    }
    ref = this.children;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (child.resizing !== "none") {
        results.push(this._resizeChild(child));
      }
    }
    return results;
  };

  GroupResizeLayer.prototype._setResizeProps = function() {
    if (this.parent === null) {
      return;
    }
    this._resizeProps = {};
    this._resizeProps.float = {
      midX: this.midX / this.parent.width,
      midY: this.midY / this.parent.height
    };
    this._resizeProps.resize = {
      width: this.width / this.parent.width,
      height: this.height / this.parent.height,
      midX: this._resizeProps.float.midX,
      midY: this._resizeProps.float.midY
    };
    this._resizeProps.stretch = {
      width: this._resizeProps.resize.width,
      height: this._resizeProps.resize.height
    };
    return this._resizeProps.pin = {
      maxX: this.parent.width - this.maxX,
      maxY: this.parent.height - this.maxY
    };
  };

  GroupResizeLayer.prototype._resizeChild = function(child) {
    var key, ref, results, updatedProps, value;
    updatedProps = {};
    updatedProps.floatX = {
      midX: child.parent.width * child._resizeProps.float.midX
    };
    updatedProps.floatY = {
      midY: child.parent.height * child._resizeProps.float.midY
    };
    updatedProps.float = {
      midX: child.parent.width * child._resizeProps.float.midX,
      midY: child.parent.height * child._resizeProps.float.midY
    };
    updatedProps.resizeWidth = {
      width: child.parent.width * child._resizeProps.resize.width,
      midX: updatedProps.float.midX
    };
    updatedProps.resizeHeight = {
      height: child.parent.height * child._resizeProps.resize.height,
      midY: updatedProps.float.midY
    };
    updatedProps.resize = {
      width: child.parent.width * child._resizeProps.resize.width,
      height: child.parent.height * child._resizeProps.resize.height,
      midX: updatedProps.float.midX,
      midY: updatedProps.float.midY
    };
    updatedProps.stretchWidth = {
      width: updatedProps.resize.width
    };
    updatedProps.stretchHeight = {
      height: updatedProps.resize.height
    };
    updatedProps.stretch = {
      width: updatedProps.resize.width,
      height: updatedProps.resize.height
    };
    updatedProps.pinX = {
      maxX: child.parent.width - child._resizeProps.pin.maxX
    };
    updatedProps.pinY = {
      maxY: child.parent.height - child._resizeProps.pin.maxY
    };
    updatedProps.pin = {
      maxX: child.parent.width - child._resizeProps.pin.maxX,
      maxY: child.parent.height - child._resizeProps.pin.maxY
    };
    ref = updatedProps[child.resizing];
    results = [];
    for (key in ref) {
      value = ref[key];
      results.push(child[key] = value);
    }
    return results;
  };

  GroupResizeLayer.define("resizeChildren", {
    get: function() {
      return this._resizeChildren;
    },
    set: function(value) {
      if (_.isBoolean(value) === false) {
        throw Error("ResizeChildren must be true or false");
      }
      if (value) {
        this.on("change:size", this._onResize);
      } else {
        this.off("change:size", this._onResize);
      }
      return this._resizeChildren = value;
    }
  });

  GroupResizeLayer.define("resizing", {
    get: function() {
      return this._resizing;
    },
    set: function(value) {
      if (_.indexOf(defaults.resizingTypes, value) === -1) {
        throw Error("'" + value + "' isn't a supported resizing type");
      }
      this.on("change:frame", this._setResizeProps);
      this.on("change:parent", this._setResizeProps);
      this._setResizeProps();
      return this._resizing = value;
    }
  });

  GroupResizeLayer.mixin = function(Class) {
    var capitalizeFirstLetter, cleanClassName, key, ref, value;
    cleanClassName = /layer/i.test(Class.name) ? "Layer" : Class.name;
    capitalizeFirstLetter = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };
    ref = defaults.props;
    for (key in ref) {
      value = ref[key];
      Framer.Defaults[cleanClassName][key] = value;
      Class.define(key, {
        configurable: true,
        get: this.prototype["get" + (capitalizeFirstLetter(key))],
        set: this.prototype["set" + (capitalizeFirstLetter(key))]
      });
    }
    Class.prototype._onResize = this.prototype._onResize;
    Class.prototype._setResizeProps = this.prototype._setResizeProps;
    return Class.prototype._resizeChild = this.prototype._resizeChild;
  };

  return GroupResizeLayer;

})(Layer);

},{}],"GroupResize":[function(require,module,exports){
var defaults,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

defaults = {
  props: {
    resizeChildren: true,
    resizing: "none"
  },
  resizingTypes: ["none", "stretchWidth", "stretchHeight", "stretch", "pinX", "pinY", "pin", "resizeWidth", "resizeHeight", "resize", "floatX", "floatY", "float"]
};

exports.GroupResizeLayer = (function(superClass) {
  extend(GroupResizeLayer, superClass);

  function GroupResizeLayer(opts) {
    var key, ref, value;
    if (opts == null) {
      opts = {};
    }
    ref = defaults.props;
    for (key in ref) {
      value = ref[key];
      if (opts[key] == null) {
        opts[key] = value;
      }
    }
    GroupResizeLayer.__super__.constructor.call(this, opts);
  }

  GroupResizeLayer.prototype._onResize = function() {
    var child, i, len, ref, results;
    if (this.children.length === 0) {
      return;
    }
    ref = this.children;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (child.resizing !== "none") {
        results.push(this._resizeChild(child));
      }
    }
    return results;
  };

  GroupResizeLayer.prototype._setResizeProps = function() {
    if (this.parent === null) {
      return;
    }
    this._resizeProps = {};
    this._resizeProps.float = {
      midX: this.midX / this.parent.width,
      midY: this.midY / this.parent.height
    };
    this._resizeProps.resize = {
      width: this.width / this.parent.width,
      height: this.height / this.parent.height,
      midX: this._resizeProps.float.midX,
      midY: this._resizeProps.float.midY
    };
    this._resizeProps.stretch = {
      width: this._resizeProps.resize.width,
      height: this._resizeProps.resize.height
    };
    return this._resizeProps.pin = {
      maxX: this.parent.width - this.maxX,
      maxY: this.parent.height - this.maxY
    };
  };

  GroupResizeLayer.prototype._resizeChild = function(child) {
    var key, ref, results, updatedProps, value;
    updatedProps = {};
    updatedProps.floatX = {
      midX: child.parent.width * child._resizeProps.float.midX
    };
    updatedProps.floatY = {
      midY: child.parent.height * child._resizeProps.float.midY
    };
    updatedProps.float = {
      midX: child.parent.width * child._resizeProps.float.midX,
      midY: child.parent.height * child._resizeProps.float.midY
    };
    updatedProps.resizeWidth = {
      width: child.parent.width * child._resizeProps.resize.width,
      midX: updatedProps.float.midX
    };
    updatedProps.resizeHeight = {
      height: child.parent.height * child._resizeProps.resize.height,
      midY: updatedProps.float.midY
    };
    updatedProps.resize = {
      width: child.parent.width * child._resizeProps.resize.width,
      height: child.parent.height * child._resizeProps.resize.height,
      midX: updatedProps.float.midX,
      midY: updatedProps.float.midY
    };
    updatedProps.stretchWidth = {
      width: updatedProps.resize.width
    };
    updatedProps.stretchHeight = {
      height: updatedProps.resize.height
    };
    updatedProps.stretch = {
      width: updatedProps.resize.width,
      height: updatedProps.resize.height
    };
    updatedProps.pinX = {
      maxX: child.parent.width - child._resizeProps.pin.maxX
    };
    updatedProps.pinY = {
      maxY: child.parent.height - child._resizeProps.pin.maxY
    };
    updatedProps.pin = {
      maxX: child.parent.width - child._resizeProps.pin.maxX,
      maxY: child.parent.height - child._resizeProps.pin.maxY
    };
    ref = updatedProps[child.resizing];
    results = [];
    for (key in ref) {
      value = ref[key];
      results.push(child[key] = value);
    }
    return results;
  };

  GroupResizeLayer.define("resizeChildren", {
    get: function() {
      return this._resizeChildren;
    },
    set: function(value) {
      if (_.isBoolean(value) === false) {
        throw Error("ResizeChildren must be true or false");
      }
      if (value) {
        this.on("change:size", this._onResize);
      } else {
        this.off("change:size", this._onResize);
      }
      return this._resizeChildren = value;
    }
  });

  GroupResizeLayer.define("resizing", {
    get: function() {
      return this._resizing;
    },
    set: function(value) {
      if (_.indexOf(defaults.resizingTypes, value) === -1) {
        throw Error("'" + value + "' isn't a supported resizing type");
      }
      this.on("change:frame", this._setResizeProps);
      this.on("change:parent", this._setResizeProps);
      this._setResizeProps();
      return this._resizing = value;
    }
  });

  GroupResizeLayer.mixin = function(Class) {
    var capitalizeFirstLetter, cleanClassName, key, ref, value;
    cleanClassName = /layer/i.test(Class.name) ? "Layer" : Class.name;
    capitalizeFirstLetter = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };
    ref = defaults.props;
    for (key in ref) {
      value = ref[key];
      Framer.Defaults[cleanClassName][key] = value;
      Class.define(key, {
        configurable: true,
        get: this.prototype["get" + (capitalizeFirstLetter(key))],
        set: this.prototype["set" + (capitalizeFirstLetter(key))]
      });
    }
    Class.prototype._onResize = this.prototype._onResize;
    Class.prototype._setResizeProps = this.prototype._setResizeProps;
    return Class.prototype._resizeChild = this.prototype._resizeChild;
  };

  return GroupResizeLayer;

})(Layer);


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
